library(cowplot)
library(Seurat)
library(ggplot2)
library(SingleR)
library(dplyr)
library(celldex)
library(RColorBrewer)
library(SingleCellExperiment)
library(DoubletFinder)

# Load filtered data

t47d_proj_filtered = readRDS("t47d_filtered.Rds")

# Rename

t47d_proj_filtered$orig.ident[which(t47d_proj_filtered$orig.ident == "ctr_1")] = "T47D_CTR_1"
t47d_proj_filtered$orig.ident[which(t47d_proj_filtered$orig.ident == "ctr_2")] = "T47D_CTR_2"

t47d_proj_filtered$orig.ident[which(t47d_proj_filtered$orig.ident == "t47d_sen_1")] = "T47D_TIS_1"
t47d_proj_filtered$orig.ident[which(t47d_proj_filtered$orig.ident == "t47d_sen_2")] = "T47D_TIS_2"

t47d_proj_filtered$orig.ident[which(t47d_proj_filtered$orig.ident == "t47d_repop1")] = "T47D_REPOP_1"
t47d_proj_filtered$orig.ident[which(t47d_proj_filtered$orig.ident == "t47d_repop2")] = "T47D_REPOP_2"

# Normalizing the data



t47d_proj_filtered <- NormalizeData(t47d_proj_filtered, normalization.method = "LogNormalize", scale.factor = 10000)

# Discovers the most variable features


t47d_proj_filtered <- FindVariableFeatures(t47d_proj_filtered, selection.method = "vst", nfeatures = 2000)



# Scale the data


all.genes <- rownames(t47d_proj_filtered)
t47d_proj_filtered <- ScaleData(t47d_proj_filtered, features = all.genes)


# PCA analysis and figures



t47d_proj_filtered <- RunPCA(t47d_proj_filtered, features = VariableFeatures(object = t47d_proj_filtered))






# Clustering, UMAP, cellcycle

ElbowPlot(t47d_proj_filtered, reduction = "pca")

t47d_proj_filtered <- FindNeighbors(t47d_proj_filtered, dims = 1:15, reduction = "pca")


t47d_proj_filtered <- FindClusters(t47d_proj_filtered, resolution = 0.5, reduction = "pca")


t47d_proj_filtered <- RunUMAP(t47d_proj_filtered, dims = 1:15, verbose = F, reduction = "pca")




DimPlot(t47d_proj_filtered,label.size = 4,repel = T,label = T, reduction = "umap")


# Cell cycle on UMAP
t47d_proj_filtered = JoinLayers(t47d_proj_filtered)


s.genes <- cc.genes.updated.2019$s.genes
g2m.genes <- cc.genes.updated.2019$g2m.genes


t47d_proj_filtered_cyclecorrection <- CellCycleScoring(t47d_proj_filtered, s.features = s.genes, g2m.features = g2m.genes, set.ident = TRUE)


t47d_proj_filtered_cyclecorrection <- RunPCA(t47d_proj_filtered_cyclecorrection, features = c(s.genes, g2m.genes))
DimPlot(t47d_proj_filtered_cyclecorrection,cols = c('G1' = '#00BA38', 'G2M' = '#F8766D', 'S' = '#619CFF'),order = c("G1", "S", "G2"))


# For differential analysis the FidMarkers function

Idents(mcf7_proj_filtered) = mcf7_proj_filtered$orig.ident
diff_genes <- FindMarkers(mcf7_proj_filtered, ident.1 = c("T47D_TIS_1"  , "T47D_TIS_2"), ident.2 = c("T47D_CTR_1" ,  "T47D_CTR_2" ))
head(diff_genes, n = 20)



t47d_proj_filtered_test_ctr_sen <- subset(t47d_proj_filtered, subset=orig.ident %in% c("T47D_CTR_1" ,  "T47D_CTR_2" ,  "T47D_TIS_1"  , "T47D_TIS_2" ))


cds <- SeuratWrappers::as.cell_data_set(t47d_proj_filtered_test_ctr_sen) #change to cds here

fData(cds)$gene_short_name <- rownames(fData(cds))
head(fData(cds))

recreate.partitions <- c(rep(1, length(cds@colData@rownames)))
names(recreate.partitions) <- cds@colData@rownames
recreate.partitions <- as.factor(recreate.partitions)


cds@clusters@listData[["UMAP"]][["partitions"]] <- recreate.partitions

list.cluster <- t47d_proj_filtered_test_ctr_sen@active.ident
cds@clusters@listData[["UMAP"]][["clusters"]] <- list.cluster

cds@int_colData@listData[["reducedDims"]]@listData[["UMAP"]] <- t47d_proj_filtered_test_ctr_sen@reductions$umap@cell.embeddings

cds <- learn_graph(cds, use_partition = FALSE)


get_earliest_principal_node <- function(cds, time_bin="5"){
  cell_ids <- which(colData(cds)[, "ident"] == 5)
  
  closest_vertex <-
    cds@principal_graph_aux[["UMAP"]]$pr_graph_cell_proj_closest_vertex
  closest_vertex <- as.matrix(closest_vertex[colnames(cds), ])
  root_pr_nodes <-
    igraph::V(principal_graph(cds)[["UMAP"]])$name[as.numeric(names
                                                              (which.max(table(closest_vertex[cell_ids,]))))]
  
  root_pr_nodes
}

get_earliest_principal_node(cds)

cds <- order_cells(cds, root_pr_nodes=get_earliest_principal_node(cds))


cds$monocle3_pseudotime <- pseudotime(cds)
data.pseudo <- as.data.frame(colData(cds))

ggplot(data.pseudo, aes(monocle3_pseudotime, seurat_clusters, fill = seurat_clusters)) + geom_boxplot()



deg <- graph_test(cds, neighbor_graph = "principal_graph")
deg %>% arrange(q_value) %>% filter(status == "OK") %>% head()

write.table(deg, "traj_deg_t47d_ctr_to_sen.tsv", sep = "\t",
            col.names = T, row.names = T)





t47d_proj_filtered_test_sen_to_repop <- subset(t47d_proj_filtered, subset=orig.ident %in% c("T47D_REPOP_1", "T47D_REPOP_2" ,       "T47D_TIS_1", "T47D_TIS_2" ))

cds <- SeuratWrappers::as.cell_data_set(t47d_proj_filtered_test_sen_to_repop) #change to cds here

fData(cds)$gene_short_name <- rownames(fData(cds))
head(fData(cds))

recreate.partitions <- c(rep(1, length(cds@colData@rownames)))
names(recreate.partitions) <- cds@colData@rownames
recreate.partitions <- as.factor(recreate.partitions)


cds@clusters@listData[["UMAP"]][["partitions"]] <- recreate.partitions

list.cluster <- t47d_proj_filtered_test_sen_to_repop@active.ident
cds@clusters@listData[["UMAP"]][["clusters"]] <- list.cluster

cds@int_colData@listData[["reducedDims"]]@listData[["UMAP"]] <- t47d_proj_filtered_test_sen_to_repop@reductions$umap@cell.embeddings



cds <- learn_graph(cds, use_partition = FALSE)



get_earliest_principal_node <- function(cds, time_bin="7"){
  cell_ids <- which(colData(cds)[, "ident"] == 7)
  
  closest_vertex <-
    cds@principal_graph_aux[["UMAP"]]$pr_graph_cell_proj_closest_vertex
  closest_vertex <- as.matrix(closest_vertex[colnames(cds), ])
  root_pr_nodes <-
    igraph::V(principal_graph(cds)[["UMAP"]])$name[as.numeric(names
                                                              (which.max(table(closest_vertex[cell_ids,]))))]
  
  root_pr_nodes
}

get_earliest_principal_node(cds)


cds <- order_cells(cds, root_pr_nodes=get_earliest_principal_node(cds))



cds$monocle3_pseudotime <- pseudotime(cds)
data.pseudo <- as.data.frame(colData(cds))

ggplot(data.pseudo, aes(monocle3_pseudotime, seurat_clusters, fill = seurat_clusters)) + geom_boxplot()

ggplot(data.pseudo, aes(monocle3_pseudotime, reorder(seurat_clusters, monocle3_pseudotime), fill = seurat_clusters)) + geom_boxplot()

deg <- graph_test(cds, neighbor_graph = "principal_graph")
deg %>% arrange(q_value) %>% filter(status == "OK") %>% head()

write.table(deg, "traj_deg_t47d_sen_to_repop.tsv", sep = "\t",
            col.names = T, row.names = T)





